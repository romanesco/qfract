/*
 * Quadratic semigroup generated by z^2+c & z^2-c
 * (parameter space)
 */

#include "../plugin.h"
using namespace QFract;

#define RE2IM2   re2=re*re; \
                 im2=im*im;

#define FUNCTION im = 2*re*im + cim; \
                 re = re2-im2 + cre;

#define INCOND  ( (re2+im2)<10 )

const char* NAME = "Quadratic Semigroup Family";
const char* CHILD = "quadsemijulia.so";


const double XL = -0.5;
const double YT = 0.5;
const double XR = 0.5;
const double YB = -0.5;
const double CRE = 0.0;
const double CIM = 1.0;

const int MAXITER = 10;
const int MAXORBIT = 10;
const Parameter PARAM;

int iter(Point z, Point c, int max)
{
  register double re=z.x;
  register double im=z.y;
  register double cre=c.x;
  register double cim=c.y;
  register double re2=re*re;
  register double im2=im*im;

  RE2IM2
      
  max--;

  int i,j;

  // z^2 + c
  FUNCTION

  if (INCOND) {
      if ( max > 0 )
	  i = iter( Point(re,im), c, max);
      else
	  i = -1;
  } else {
      return 1;
  }

  if (i == 1) return 1;

  // z^2 - c
  re = z.x; im = z.y;
  RE2IM2

  cre = -cre;
  cim = -cim;

  FUNCTION

  if (INCOND) {
      if ( max > 0 )
	  j = iter( Point(re,im), c, max);
      else
	  j = -1;
  } else {
      return 1;
  }

  return ( (i<j) ? j : i); 
}

extern "C" {
int iter(Point z, Parameter param, int max)
{
    Point c(z);
    return iter(z, c, max);
}

Point map(Point z, Point c, Parameter param)
{
  register double re=z.x;
  register double im=z.y;
  register double cre=c.x;
  register double cim=c.y;
  register double re2=re*re;
  register double im2=im*im;

  FUNCTION

  return Point(re,im);
}

Point init(Point c, Parameter param) {return c;}

PluginInfo* getInfo()
{
  PluginInfo * i= new PluginInfo( NAME, XL, YT, XR, YB, MAXITER, MAXORBIT,
				 PARAM, CHILD);
  return i;
}
}
