/*
 * Unicritical map z^d+c (parameter space)
 */

#include "../plugin.h"
using namespace QFract;
#include <iostream>
#include <complex>
#include <random>
using namespace std;

const char* NAME = "Semigroup generated by z^2+c, z^2-c (parameter space, by random trials)";
const char* CHILD= "quadsemigrjulia.so";
//

const double XL = -2.0;
const double YT = 2.0;
const double XR = 2.0;
const double YB = -2.0;

const int MAXITER = 10;
const int MAXORBIT = 10;
const int N = 2;
double VALUE[N]={10, 10};
const Parameter PARAM( N, VALUE );
const char* PARAMDESC[N]={ "trials", "trials for child window" };

std::random_device rnd;
std::mt19937 mt(rnd());
std::uniform_int_distribution<int> dis(0,1);

extern "C" {
int iter(Point z, Parameter param, int max)
{
  complex<double> a(z.x, z.y), x;
  complex<double> tmp;
  int N(param.Value(0));
  
  int i,j, n=-1;
  for (j=0; j<N; j++) {
    x=0.0;
    for ( i=0; (i<max) && (norm(x) < 100 ); i++ ) {
      x *= x;
      x += dis(mt)  ? a : -a;
    }
    if (i >= max) n++;
  }
  
  return n;
}

Point map(Point z, Point c, Parameter param)
{
    complex<double> a(c.x, c.y);
    complex<double> x(z.x, z.y);
    complex<double> tmp;

    register int j;
    tmp=x;
    for ( j=1; j<param.Value(0); j++)
	tmp *= x;
    x = tmp + a;
    
    return Point(real(x),imag(x));
}

Point init(Point c, Parameter param) 
{
    return c;
}

PluginInfo* getInfo()
{
  PluginInfo* i= new PluginInfo(NAME, XL, YT, XR, YB, MAXITER, MAXORBIT,
				PARAM, CHILD, PARAMDESC);
  return i;
}
}
